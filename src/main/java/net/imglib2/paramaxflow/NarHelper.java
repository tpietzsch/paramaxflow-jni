package net.imglib2.paramaxflow;

import java.io.IOException;
import java.net.URL;
import java.util.Properties;
import java.util.StringTokenizer;

/**
 * A helper to load the library generated by the nar-maven-plugin.
 * 
 * @author Johannes Schindelin, Florian Jug
 */
public class NarHelper
{

	/**
	 * Loads the library compiled by the nar-maven-plugin.
	 * 
	 * @param clazz
	 *            a class compiled into the same project as the library
	 * @param groupId
	 *            the groupId of the project
	 * @param artifactId
	 *            the artifactId of the project
	 */
	public static void loadLibrary( final Class< ? > clazz, final String groupId, final String artifactId )
	{
		final String osName = System.getProperty( "os.name" ).toLowerCase();
		final String libPrefix = "lib";
		final String libSuffix;
		if ( osName.startsWith( "mac" ) )
		{
			libSuffix = ".jnilib";
		}
		else if ( osName.startsWith( "win" ) )
		{
			libSuffix = ".dll";
		}
		else
		{
			libSuffix = ".so";
		}

		final String propertiesPath = "/META-INF/nar/" + groupId + "/" + artifactId + "/nar.properties";
		final URL url = clazz.getResource( propertiesPath );
		try
		{
			if ( url == null )
			{
				// This covers the case of a packaged MacOS .app-file without
				// nar.properties.
				// In such a case you need the corresponding .jnilib-file in
				// /Content/MacOS within the .app-file.
				// Also you need to tell appbundler (you used to create the
				// .app) to add a classpath with 'dir', e.g. <classpath
				// dir="lib"/>.
				String path = "";
				final String property = System.getProperty( "java.library.path" );
				final StringTokenizer parser = new StringTokenizer( property, ";" );
				while ( parser.hasMoreTokens() )
				{
					path = parser.nextToken();
					System.err.println( path );
				}
				final String libPath = path + "/libparamaxflow-jni-1.0.0-SNAPSHOT.jnilib";
				System.err.println( "Going to load: " + libPath );
				System.load( libPath );
			}
			else
			{
				final Properties props = new Properties();
				props.load( url.openStream() );
				final String output = props.getProperty( "output" );
				String aol = null, libName = null;
				for ( final Object key : props.keySet() )
				{
					final String name = ( String ) key;
					if ( name.endsWith( ".output" ) )
					{
						aol = name.substring( 0, name.length() - ".output".length() );
						libName = props.getProperty( name );
					}
				}
				if ( output == null || aol == null || libName == null ) { throw new UnsatisfiedLinkError( "Could not determine name of native library: " + output + ":" + aol + ":" + libName ); }
				final String urlString = url.toString();
				final String libPath;
				if ( urlString.startsWith( "file:" ) )
				{
					String path = urlString.substring( 5, urlString.length() - propertiesPath.length() );
					if ( path.endsWith( "/classes" ) )
						path = path.substring( 0, path.length() - 8 );
					libPath = path + "/nar/" + libName + "-" + aol + "-jni/lib/" + aol + "/jni/" + libPrefix + libName + libSuffix;
				}
				else if ( urlString.startsWith( "jar:file:" ) )
				{
					final int bang = urlString.indexOf( "!/" );
					if ( bang < 0 ) { throw new UnsatisfiedLinkError( "Unexpected URL: " + urlString ); }
					final String path = urlString.substring( 9, bang );
					final int target = path.lastIndexOf( "/target/" );
					if ( target < 0 ) { throw new UnsatisfiedLinkError( "Could not infer the target/ location: " + urlString ); }
					libPath = path.substring( 0, target + 8 ) + "nar/" + libName + "-" + aol + "-jni/lib/" + aol + "/jni/" + libPrefix + libName + libSuffix;
				}
				else if ( urlString.startsWith( "rsrc:" ) )
				{
					final String property = System.getProperty( "java.library.path" );
					final StringTokenizer parser = new StringTokenizer( property, ";" );
					String path = "";
					while ( parser.hasMoreTokens() )
					{
						path = parser.nextToken();
						System.err.println( path );
					}
					libPath = path + "/" + libPrefix + libName + libSuffix; // "/libparamaxflow-jni-1.0.0-SNAPSHOT.jnilib";
					System.err.println( "Going to load: " + libPath );
				}
				else
				{
					throw new UnsatisfiedLinkError( "Could not load native library: URL of .jar is: " + urlString );
				}
				System.load( libPath );
			}
		}
		catch ( final IOException e )
		{
			e.printStackTrace();
			throw new UnsatisfiedLinkError( "Could not find native library" );
		}

	}

}
